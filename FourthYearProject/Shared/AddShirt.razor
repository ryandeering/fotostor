@inject IPostDataService PostDataService
@inject IShoppingCartService Cart
@inject IUserService UserService
@inject IMatToaster Toaster
@if (PostIn != null)
{
    <div class="card mb-2">
        <div class="card-body">
            <p class="card-text">



                @if (PostIn.ShirtsEnabled)
                {
                    <h3>Purchase Shirt</h3>

                    <img src=@PostIn.Thumbnail width="500" height="500"/>


                    <h2>All shirts are €25.00. Posted within 3 days. Payment through Stripe.</h2>


                    <select class="form-control selectpicker" @bind="size">
                        <option>--select--</option>
                        @foreach (var item in sizes)
                        {
                            <option>@item</option>
                        }
                    </select>

                    <br/>
                    <RadzenButton style="align-content: flex-end" Click=@(args => AddtoCart()) Text="Add Shirt to Cart" ButtonStyle="ButtonStyle.Secondary"></RadzenButton>
                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => Cancel()) Text="Cancel" ButtonStyle="ButtonStyle.Danger"/>
                }
                else
                {
                    <h3>Invalid.</h3>
                }


            </p>
        </div>
    </div>
}
else
{
    <div class="card mb-4">
        <div class="card-body">
            <p class="card-text">
                <h3>Invalid.</h3>
            </p>
        </div>
    </div>
}

@code{

    [CascadingParameter]
    internal BlazoredModalInstance ModalInstance { get; set; }

    public string Thumbnail = string.Empty;

    [Parameter]
    public int PostId { get; set; }

    internal Post PostIn { get; set; }

    internal ClaimsPrincipal identity;

    public string UserId { get; set; }

    private readonly List<string> sizes = new(new[] {"XS", "S", "M", "L", "XL", "XXL"});
    private string size;

    protected override async Task OnInitializedAsync()
    {
        identity = await UserService.GetUserAsync();
        PostIn = await PostDataService.GetPostDetails(PostId);
        Thumbnail = PostIn.Thumbnail;


        StateHasChanged();
    }

    internal async Task AddtoCart()
    {
        var LoggedInID = identity.Claims.Where(c => c.Type.Equals("sub"))
            .Select(c => c.Value).SingleOrDefault().ToString();
        var ol = new OrderLineItem(PostIn);
        ol.Price = 25.00;
        ol.Type = "Shirt";
        ol.Size = size;

        await Cart.AddToCart(LoggedInID, ol);
        Toaster.Add("Shirt added to cart.", MatToastType.Success, "SUCCESS");
        await ModalInstance.CancelAsync();
    }

    internal async Task Cancel()
    {
        await ModalInstance.CancelAsync();
    }

}