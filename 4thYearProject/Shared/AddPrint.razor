@inject IPostDataService PostDataService
@inject IShoppingCartService Cart
@inject IUserService UserService
@inject IMatToaster Toaster
@if (PostIn != null)
{
    <div class="card mb-2"> 
        <div class="card-body">
            <p class="card-text">



                @if (PostIn.PrintsEnabled)
                {
                    <h3>Purchase Print</h3>

                    <img src=@PostIn.Thumbnail width="500" height="500"/>

                    <h2>Prices vary depending on size. Posted within 3 days. Payment through Stripe.</h2>

                <select class="form-control selectpicker" @bind="size">
                    <option>--select--</option>
                    @foreach (var item in sizes)
                    {
                        <option>@item</option>
                    }
                </select>
                    <br />
                    <RadzenButton style="align-content: flex-end" Click=@(args => AddtoCart()) Text="Add Print to Cart" ButtonStyle="ButtonStyle.Secondary" ></RadzenButton>
                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => Cancel()) Text="Cancel" ButtonStyle="ButtonStyle.Danger" />
            }
            else
            {
                <h3>Invalid.</h3>
            }


                </p>
            </div>
        </div>

    }
    else
    {
        <div class="card mb-4">
            <div class="card-body">
                <p class="card-text">
                    <h3>Invalid.</h3>
                </p>
            </div>
        </div>

    }

@code{

    [CascadingParameter] internal BlazoredModalInstance ModalInstance { get; set; }

    public String Thumbnail = String.Empty;

    [Parameter] public int PostId { get; set; }

    internal Post PostIn { get; set; }

    internal ClaimsPrincipal identity;

    public string UserId { get; set; }

    private List<String> sizes = new List<String>(new String[] { "Small 39.5 x 59cm: €8.84", "Medium 56.3 x 84cm: €14.17", "Large 79.7 x 119cm: €22.13" });
    private String size;

    protected async override Task OnInitializedAsync()
    {
        identity = await UserService.GetUserAsync();
        PostIn = await PostDataService.GetPostDetails(PostId);
        Thumbnail = PostIn.Thumbnail;

        StateHasChanged();
    }

    internal async Task AddtoCart()
    {
        string LoggedInID = identity.Claims.Where(c => c.Type.Equals("sub"))
                 .Select(c => c.Value).SingleOrDefault().ToString();
        OrderLineItem ol = new OrderLineItem(PostIn);
        ol.Type = "Print";
        ol.Size = size;

        switch (size)
        {
            case "Small 39.5 x 59cm: €8.84":
                ol.Price = 8.84;
                break;

            case "Medium 56.3 x 84cm: €14.17":
                ol.Price = 14.17;
                break;

            case "Large 79.7 x 119cm: €22.13":
                ol.Price = 22.13;
                break;
        }


        await Cart.AddToCart(LoggedInID, ol);
        Toaster.Add("Shirt added to cart.", MatToastType.Success, "SUCCESS");
        await ModalInstance.CancelAsync();
    }

    internal async Task Cancel() => await ModalInstance.CancelAsync();
}
