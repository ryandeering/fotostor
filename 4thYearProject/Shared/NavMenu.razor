@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject IUserDataService UserDataService
@inject IUserService _userService




<div class="bg-light" id="sidebar-wrapper">
    <div class="sidebar-logo">
        <img class="img-responsive" id="logo" src="images/projlogo.png" />
    </div>
    <div class="profile">
        <AuthorizeView>
            <Authorized>
                <div class="profile-bg">
                    <img class="img-responsive" src="https://storage.googleapis.com/4thyearprojectrd/@LoggedInID" />
                </div>
                <div class="profile-picture">
                    <img class="img-responsive circle account-photo" src="https://storage.googleapis.com/4thyearprojectrd/@LoggedInID" />
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="profile-bg">
                    <img class="img-responsive" src="images/profilePicture.jpg" />
                </div>
                <div class="profile-picture">
                    <img class="img-responsive circle account-photo" src="images/profilePicture.jpg" />
                </div>
            </NotAuthorized>
        </AuthorizeView>

    </div>
    <div class="menu list-group list-group-flush">
        <AuthorizeView>
            <Authorized>
                <NavLink class="list-group-item list-group-item-action bg-light" href="/" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
                <NavLink class="list-group-item list-group-item-action bg-light" href="/employeeoverview">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Employees
                </NavLink>
                <NavLink class="list-group-item list-group-item-action bg-light" href="/employeeedit">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Add new employee
                </NavLink>
                <button class="list-group-item list-group-item-action bg-light"
                        @onclick="BeginSignOut">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Log out
                    (@context.User.Identity.Name)
                </button>
                <button class="list-group-item list-group-item-action bg-light" @onclick="WriteToken">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Write token
                </button>
            </Authorized>
            <NotAuthorized>
                <NavLink class="list-group-item list-group-item-action bg-light"
                         href="authentication/login">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Log in
                </NavLink>
                <NavLink class="list-group-item list-group-item-action bg-light"
                         href="https://localhost:44333/Identity/Account/Register">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Register
                </NavLink>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code{

    UserData user;
    ClaimsPrincipal identity;
    string LoggedInID = String.Empty;

    protected async override Task OnInitializedAsync()
    {

        identity = await _userService.GetUserAsync();

        if (identity.Identity.IsAuthenticated)
        {
            LoggedInID = identity.Claims.Where(c => c.Type.Equals("sub"))
                 .Select(c => c.Value).SingleOrDefault().ToString();
            LoggedInID = LoggedInID + ".JPEG";
            Console.WriteLine(LoggedInID);
        }
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }


    private async Task WriteToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var token))
        {
            System.Diagnostics.Debug.WriteLine(token.Value);
        }
    }
}
