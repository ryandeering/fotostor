@inject IPostDataService PostDataService
@inject IShoppingCartService Cart 
@inject IUserService UserService
@inject IMatToaster Toaster
@if (PostIn != null)
{
    <div class="card mb-4">
        <div class="card-body">
            <p class="card-text">



                @if (PostIn.LicenseEnabled)
                {
                    <h3>Adding License</h3>

                    <img src=@PostIn.Thumbnail />

                    @PostIn.LicensePrice

                    <button @onclick="AddtoCart" class="btn btn-primary">Submit</button>
                    <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
                }
                else
                {
                    <h3>Invalid.</h3>
                }
                

            </p>
        </div>
    </div>

}
else
{
    <div class="card mb-4">
        <div class="card-body">
            <p class="card-text">
                <h3>Invalid.</h3>
            </p>
        </div>
    </div>

}


@code {

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }


    public String Thumbnail = String.Empty;
    public double LicensePrice = 0.0;

    [Parameter] public int PostId { get; set; }

    Post PostIn { get; set; }
    ClaimsPrincipal identity;
    public string UserId { get; set; }
    protected async override Task OnInitializedAsync()
    {
        identity = await UserService.GetUserAsync();
        PostIn = await PostDataService.GetPostDetails(PostId);
        Thumbnail = PostIn.Thumbnail;
        LicensePrice = PostIn.LicensePrice;

        StateHasChanged();
    }


    void AddtoCart()
    {
        string LoggedInID = identity.Claims.Where(c => c.Type.Equals("sub"))
                 .Select(c => c.Value).SingleOrDefault().ToString();
        OrderLineItem ol = new OrderLineItem(PostIn);
        ol.Price = PostIn.LicensePrice;
        ol.Type = "License";

        Cart.AddToCart(LoggedInID,ol);
        Toaster.Add("License added to cart.", MatToastType.Success, "SUCCESS");


    }


    async Task Cancel() => await ModalInstance.CancelAsync();

    //void SaveMovie()
    //{
    //    MovieService.Save(Movie);
    //    ModalInstance.CloseAsync(ModalResult.Ok<Movie>(Movie));
    //}

}
